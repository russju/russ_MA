---
title: "volcano plot foods/nutrient cluster and taxa correlation"
output: html_notebook
---

#libraries
```{r}
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# 
# BiocManager::install("biomformat")

# if (!requireNamespace('BiocManager', quietly = TRUE))
#     install.packages('BiocManager')
# 
#  BiocManager::install('EnhancedVolcano')

# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# 
# BiocManager::install("a4Base")
  

library(tidyverse)
library(biomformat)
library(compositions)
library(a4Base)
library(plotly)
library(gridExtra)

library(gridExtra)
library(ggpubr)
library(Maaslin2)
```

# Paths
```{r}
wd <- '../../' 

output_dir = paste0(wd,'results/')
diet.protocols = paste0(output_dir,'diet.protocols/')

data_dir = paste0(wd,'data/')
table_dir = paste0(data_dir, 'tables/')
biom_dir = paste0(data_dir,'silva.feces/')
```

## Create Output Dirs
```{r}
dir.create(output_dir)
dir.create(table_dir)
```

# Data Import
```{r}

L6.rel.clr.U1.U2 <- read_tsv(paste0(table_dir, 'L6.normalized.correlation_06.10.tsv'))
L6.rel.clr.U1.U2 <- column_to_rownames(L6.rel.clr.U1.U2,'file_name')

L2.rel.clr.U1.U2 <- read_tsv(paste0(table_dir, 'L2.normalized.correlation_06.10.tsv'))
L2.rel.clr.U1.U2 <- column_to_rownames(L2.rel.clr.U1.U2,'file_name')

cl.sum.z <- read_tsv(paste0(table_dir, 'nutrient.cluster.correlation_17.02.tsv')) %>% column_to_rownames(.,'file_name')
# keto.bls <- read_tsv(paste0(table_dir, 'keto.bls_04.08.tsv'))
# clusters <- read_tsv(paste0(table_dir, 'nutrient.clusters.df_07.10.tsv'))

otu.weighted <- read_tsv(paste0(table_dir,'otu.conv.w.19.08.tsv'))
otu.weighted <- as.data.frame(otu.weighted)

nutr.cluster <- read_tsv(paste0(table_dir,'nutrient.clusters.09.09.tsv'))

k.bls_prodi <- read_tsv(paste0(table_dir,'k.bls_prodi_13_08.tsv'))
k.bls_prodi$file_name <- gsub(k.bls_prodi$file_name,pattern='u',replacement = 'U') %>% gsub(pattern = '_',replacement = '.')
```






##L6
```{r}
#data wrangling: constructing community matrix, weighted,nutrient clusters


otu.weighted <- otu.weighted %>% 
  dplyr::group_by(file_name) %>% 
  mutate_at(.vars = vars(everything(), -file_name),
            .funs = funs(as.numeric(.))) %>% 
  column_to_rownames('file_name') %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column('foods')
colnames(nutr.cluster) <- c('foods','nutrient.clusters')
df <-
  otu.weighted %>% 
  right_join(nutr.cluster, by = "foods") %>% 
  dplyr::select(foods, nutrient.clusters, everything()) %>% 
  pivot_longer(cols = c(everything(), -foods, -nutrient.clusters), 
               names_to = "sample", values_to = 'value') %>% 
  filter(value > 0) %>%  ##only 5 clusters that values>0
  group_by(nutrient.clusters, sample) %>% 
  summarise(value = sum(value)) %>% 
  pivot_wider(names_from = nutrient.clusters, values_from = value,
              values_fill = list(value = 0)) %>% 
  pivot_longer(names_to = 'nutrient.clusters', 
               values_to = 'value', 
               cols = c('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15'))

clusters <- pivot_wider(df,names_from = 'nutrient.clusters',values_from = 'value')
colnames(clusters) <- c('sample','1.veg.fruit','2.carbs.bread','3.fatty.sweet','4.carbs.cereal','5.seed','6.nut','7.kohl','8.fish.sauce','9.egg','10.alcohol','11.wurst','12.soft.drinks','13.white.meat','14.fatty.dairy','15.cheese')


# write_tsv(clusters,'C:/Users/Juliane/Desktop/project.directory/data/tables/cluster.w.df_07.10.tsv')


```

#data normalization and standardization

weighted nutrient clusters matrix

cl.sum  relative centered log ratio
cl.sum.z z.score standardization

maaslin analysis for explanation which nutrient clusters and taxa are most different between diets

```{r}
#sum up food intake from one sample

clusters <- read_tsv(paste0(table_dir,'cluster.w.df_07.10.tsv'))

cl.sum <- clusters
# cl.sum <- aggregate(.~sample, clusters, sum)
cl.sum[is.na(cl.sum)] <- 0

cl.sum <- column_to_rownames(cl.sum,'sample')

cl.sum.z <- apply(cl.sum,2,scale) %>% as.data.frame(.)
cl.sum.z <- cbind(clusters$sample,cl.sum.z)

colnames(cl.sum.z)[colnames(cl.sum.z) == 'clusters$sample'] <- 'file_name'
#relative abundance

cl.sum <- data.matrix(cl.sum)
cl.sum.rowsum <- rowSums(cl.sum)
cl.sum <- cbind(cl.sum,cl.sum.rowsum)

#value for one week/sum of all week

cl.sum <- as.data.frame(cl.sum)
# cl.sum <- cl.sum+0.0001
# cl.sum <- cbind(cl.sum[1:15]/cl.sum[,16],cl.sum[16])
cl.sum <- cl.sum[1:15]/cl.sum$cl.sum.rowsum


#clr transformation

# cl <- ltdl.fix.df(cl.sum)

cl.sum <- clr(acomp(cl.sum)) %>% as.data.frame(.)
# cl.sum <- dplyr::select(cl.sum,everything(),-ends_with('rowsum'))

cl.sum$file_name <- row.names(cl.sum)

# write_tsv(cl.sum.z,'C:/Users/Juliane/Desktop/project.directory/data/tables/nutrient.cluster.correlation_17.02.tsv')
# write_tsv(cl.sum,'C:/Users/Juliane/Desktop/project.directory/data/tables/nutrient.cluster.correlation_22.10.tsv')

# cl.sum <- read_tsv('C:/Users/Juliane/Desktop/project.directory/data/tables/nutrient.cluster.correlation_22.10.tsv')
```

boxplots with nutrient clusters in the diets (keto and non keto)
```{r}
cl.sum <- read_tsv(paste0(table_dir,'nutrient.cluster.correlation_22.10.tsv'))

cl.sum.clr <- cl.sum.z %>% as.data.frame(.) %>% dplyr::select(.,starts_with(c('3.fatty.sweet','4.carbs.cereal','2.carbs.bread','14.fatty.dairy','15.cheese','file_name'))) %>%
  column_to_rownames(.,'file_name')
cl.sum.clr$diet <- ifelse(grepl('U1',row.names(cl.sum.clr)),'non keto','keto')

symnum.args <- list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1), symbols = c("****", "***", "**", "*", "ns"))

fatty.sweets.clr <- ggplot(cl.sum.clr,aes(x = diet,y = `3.fatty.sweet`)) +
  geom_boxplot()+geom_jitter(shape = 21)+ stat_compare_means(comparison = list(c('non keto','keto')),hide.ns = FALSE,symnum.args = symnum.args,vjust = 1.5)

carbs.clr <- ggplot(cl.sum.clr,aes(x = diet,y = `4.carbs.cereal`)) +
  geom_boxplot()+geom_jitter(shape = 21)+ stat_compare_means(comparison = list(c('non keto','keto')),hide.ns = FALSE,symnum.args = symnum.args,vjust = 1.5)

fatty.dairy.clr <- ggplot(cl.sum.clr,aes(x = diet,y = `14.fatty.dairy`)) +
  geom_boxplot()+geom_jitter(shape = 21)+ stat_compare_means(comparison = list(c('non keto','keto')),hide.ns = FALSE,symnum.args = symnum.args,vjust = 1.5)

cheese.clr <- ggplot(cl.sum.clr,aes(x = diet,y = `15.cheese`)) +
  geom_boxplot()+geom_jitter(shape = 21)+ stat_compare_means(comparison = list(c('non keto','keto')),hide.ns = FALSE,symnum.args = symnum.args,vjust = 1.5)
```

correlation between nutrient clusters and taxa
```{r}
# cl.sum.z <- cl.sum.z %>% column_to_rownames(.,'file_name')

merge.L6.nutr <- L6.rel.clr.U1.U2 %>% merge(.,cl.sum.z,by = 'row.names',all.x=T,all.y = T) %>% column_to_rownames(.,'Row.names')

merge.L6.nutr[is.na(merge.L6.nutr)] <- 0


cor.test.L6.nutr <- merge.L6.nutr %>% 
  pivot_longer(names_to = "variable_right", values_to = "value_right", D_0__Archaea.D_1__Euryarchaeota.D_2__Methanobacteria.D_3__Methanobacteriales.D_4__Methanobacteriaceae.D_5__Methanobrevibacter:D_0__Eukaryota.D_1__SAR.D_2__Stramenopiles.D_3__Incertae.Sedis.D_4__Blastocystis.D_5__unidentified.guinea.pig.faeces.isolate.U26177) %>% 
  pivot_longer(names_to = "variable_left", values_to = "value_left", `1.veg.fruit`:`15.cheese`) %>% 
  group_by(variable_left, variable_right) %>% 
  
  mutate(p.value = broom::tidy(cor.test(value_left, value_right,method = 'spearman'))$p.value,
         estimate = broom::tidy(cor.test(value_left, value_right,method = 'spearman'))$estimate)

cor.test.L6.nutr[is.na(cor.test.L6.nutr)] <- 0

p.adj.L6.nutr <- subset(cor.test.L6.nutr,select = `p.value`) %>% data.matrix(.) %>% p.adjust(.,method = 'fdr')
r.cor.L6.nutr <- subset(cor.test.L6.nutr,select = `estimate`) %>% data.matrix(.)

```

plotting
```{r}
#x axis log2 correlation

# cor.test.log.L6 <- log2(r.cor.L6) %>% as.numeric(.)
# cor.test.log.L6[is.nan(cor.test.log.L6)] <- 0
# cor.test.log.L6[is.infinite(cor.test.log.L6)] <- 0
# cor.test.log.L6 <- as.data.frame(cor.test.log.L6)

r.cor.L6.nutr[is.nan(r.cor.L6.nutr)] <- 0
r.cor.L6.nutr[is.infinite(r.cor.L6.nutr)] <- 0
r.cor.L6.nutr <- as.data.frame(r.cor.L6.nutr)

#y axis -log10 p.value

p.adj.log.L6.nutr <- -log10(p.adj.L6.nutr)
p.adj.log.L6.nutr[is.infinite(p.adj.log.L6.nutr)] <- 0
p.adj.log.L6.nutr <- as.data.frame(p.adj.log.L6.nutr)

cor.test.adj.L6.nutr <- cbind(cor.test.L6.nutr[ ,c(1,3)],p.adj.log.L6.nutr) %>% cbind(.,r.cor.L6.nutr) %>% as.data.frame(.)
colnames(cor.test.adj.L6.nutr) <- c('genus','clusters','p.adj.log','estimate')

cor.test.adj.L6.nutr <- cor.test.adj.L6.nutr[cor.test.adj.L6.nutr$p.adj.log != 0 & cor.test.adj.L6.nutr$estimate != 0,]

# write_tsv(cor.test.adj.L6.nutr,'C:/Users/Juliane/Desktop/project.directory/data/tables/corr.nutclust.L6.tsv')

sig.nutr <- cor.test.adj.L6.nutr[cor.test.adj.L6.nutr$p.adj.log >= -log10(0.05) & cor.test.adj.L6.nutr$p.adj.log > 0.00000  ,] 
top.sig.nutr <- sig.nutr[order(-sig.nutr$p.adj.log ),]

# pdf(file = 'C:/Users/Juliane/Desktop/project.directory/results/top.sig.nutr_02.11.pdf',onefile = T,width = 15,height = 20)
# grid.table(top.sig.nutr)
# dev.off()

#volcano plot ggplot()

vp.L6.cl.nutr <- ggplot(cor.test.adj.L6.nutr,
    aes(x = `estimate`, y = `p.adj.log`)) +
  geom_point() +
  ggtitle("Volcano plot") +
  xlab("correlation") + 
  ylab("-log10 adjusted p-value")+
  geom_hline(yintercept = -log10(0.01))

# ggplotly(vp,tooltip = c('x','y','text'))

vp.L6.cl.nutr+xlim(c(-1,1))

###maaslin
row.names(merge.L6.nutr) <- str_replace(row.names(merge.L6.nutr),pattern = 'ST.',replacement = '') %>% 
  str_replace(.,pattern = '0U', replacement = 'U') 
merge.L6.nutr <- dplyr::select(merge.L6.nutr,everything(),-starts_with('name1'))

merge.L6.nutr[is.na(merge.L6.nutr)] <- 0
merge.L6.nutr <- merge.L6.nutr[, colSums(merge.L6.nutr != 0) > 0]

df <- row.names(merge.L6.nutr) %>% as.data.frame(.)
colnames(df) <- 'file_name'
df$group <- ifelse(grepl('U2', df$file_name), 'keto', 'a.non-keto')  
df <- column_to_rownames(df,'file_name')
merge.L6.nutr <- dplyr::select(merge.L6.nutr,everything(),-starts_with('file_name'))

maaslin.L6.nutclust <- Maaslin2(input_data = merge.L6.nutr,input_metadata = df,fixed_effects = 'group',output = 'L6.nutclust_maaslin',
                                min_abundance = -Inf,
                                 normalization = 'NONE',
                                 transform = 'NONE',
                                 standardize = F, 
                                 random_effects = 'row.names')


```

##L2
correlation between nutrient clusters and taxa
```{r}
# row.names(L2.rel.clr.U1.U2) <- str_replace(row.names(L2.rel.clr.U1.U2),pattern = 'ST.',replacement = '') %>% 
#   str_replace(.,pattern = '0U', replacement = 'U')
merge.L2.nutr <- L2.rel.clr.U1.U2 %>% merge(.,cl.sum.z,by = 'row.names',all.x=T,all.y = T) %>% column_to_rownames(.,'Row.names')

merge.L2.nutr[is.na(merge.L2.nutr)] <- 0

cor.test.L2.nutr <- merge.L2.nutr %>% 
  pivot_longer(names_to = "variable_right", values_to = "value_right", D_0__Archaea.D_1__Euryarchaeota:D_0__Eukaryota.D_1__SAR) %>% 
  pivot_longer(names_to = "variable_left", values_to = "value_left", `1.veg.fruit`:`15.cheese`) %>% 
  group_by(variable_left, variable_right) %>% 
  
 mutate(p.value = broom::tidy(cor.test(value_left, value_right,method = 'spearman'))$p.value,
         estimate = broom::tidy(cor.test(value_left, value_right,method = 'spearman'))$estimate)

cor.test.L2.nutr[is.na(cor.test.L2.nutr)] <- 0

p.adj.L2.nutr <- subset(cor.test.L2.nutr,select = `p.value`) %>% data.matrix(.) %>% p.adjust(.,method = 'fdr')
r.cor.L2.nutr <- subset(cor.test.L2.nutr,select = `estimate`) %>% data.matrix(.)

```

plotting
```{r}
#x axis log2 correlation

r.cor.L2.nutr[is.nan(r.cor.L2.nutr)] <- 0
r.cor.L2.nutr[is.infinite(r.cor.L2.nutr)] <- 0
r.cor.L2.nutr <- as.data.frame(r.cor.L2.nutr)

#y axis -log10 p.value

p.adj.log.L2.nutr <- -log10(p.adj.L2.nutr)
p.adj.log.L2.nutr[is.infinite(p.adj.log.L2.nutr)] <- 0
p.adj.log.L2.nutr <- as.data.frame(p.adj.log.L2.nutr)

cor.test.adj.L2.nutr <- cbind(cor.test.L2.nutr[ ,c(1,3)],p.adj.log.L2.nutr) %>% cbind(.,r.cor.L2.nutr) %>% as.data.frame(.)
colnames(cor.test.adj.L2.nutr) <- c('phylum','clusters','p.adj.log','estimate')

cor.test.adj.L2.nutr <- cor.test.adj.L2.nutr[cor.test.adj.L2.nutr$p.adj.log != 0 & cor.test.adj.L2.nutr$estimate != 0,]

# write_tsv(cor.test.adj.L2.nutr,'C:/Users/Juliane/Desktop/project.directory/data/tables/corr.nutclust.L2.tsv')

sig.nutr.L2 <- cor.test.adj.L2.nutr[cor.test.adj.L2.nutr$p.adj.log <= 0.050 & cor.test.adj.L2.nutr$p.adj.log > 0.00000,]
top.sig.nutr.L2 <- sig.nutr.L2[order(-sig.nutr.L2$p.adj.log ),]
#volcano plot ggplot()

vp.L2.cl.nutr <- ggplot(cor.test.adj.L2.nutr,
    aes(x = `estimate`, y = `p.adj.log`)) +
  geom_point() +
  ggtitle("Volcano plot") +
  xlab("correlation") + 
  ylab("-log10 adjusted p-value")

# ggplotly(vp,tooltip = c('x','y','text'))

vp.L2.cl.nutr+xlim(c(-1,1))

###maaslin

df <- row.names(merge.L2.nutr) %>% as.data.frame(.)
colnames(df) <- 'file_name'
df$group <- ifelse(grepl('U2', df$file_name), 'keto', 'a.non-keto')  
df <- column_to_rownames(df,'file_name')
merge.L2.nutr <- dplyr::select(merge.L2.nutr,everything(),-starts_with('file_name'))
maaslin.L2.nutclust <- Maaslin2(input_data = merge.L2.nutr,input_metadata = df,fixed_effects = 'group',output = 'L2.nutclust_maaslin',
                                min_abundance = -Inf,
                                 normalization = 'NONE',
                                 transform = 'NONE',
                                 standardize = F, 
                                 random_effects = 'row.names')

```

###export potting
```{r}
# pdf('C:/Users/Juliane/Desktop/project.directory/results/boxplots.taxa.asso/nutclust.pdf')

ggarrange(fatty.sweets.clr,carbs.clr,fatty.dairy.clr,cheese.clr,ncol = 2,nrow = 2)


# dev.off()


```