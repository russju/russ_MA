---
title: "correlation between conventional clusters and taxa"
output: html_notebook
---

#libraries
```{r}
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# 
# BiocManager::install("mixOmics")
  

library(tidyverse)
library(mixOmics)
library(plotly)
library(gridExtra)

library(Maaslin2)
library(ggpubr)
```

# Paths
```{r}
wd <- '../../' 

output_dir = paste0(wd,'results/')
diet.protocols = paste0(output_dir,'diet.protocols/')

data_dir = paste0(wd,'data/')
table_dir = paste0(data_dir, 'tables/')
biom_dir = paste0(data_dir,'silva.feces/')
```

## Create Output Dirs
```{r}
dir.create(output_dir)
dir.create(table_dir)
```

# Data Import
```{r}
conv.sum <- read_tsv(paste0(table_dir, 'conv.cluster.correlation_26.10.tsv'))
conv.clust.z <- read_tsv(paste0(table_dir, 'conv.cluster.correlation_17.02.tsv'))

L6.rel.clr.U1.U2 <- read_tsv(paste0(table_dir, 'L6.normalized.correlation_06.10.tsv'))
names(L6.rel.clr.U1.U2)[names(L6.rel.clr.U1.U2) == 'sample'] <- 'file_name'


L2.rel.clr.U1.U2 <- read_tsv(paste0(table_dir, 'L2.normalized.correlation_06.10.tsv'))
names(L2.rel.clr.U1.U2)[names(L2.rel.clr.U1.U2) == 'sample'] <- 'file_name'
```

L6(genus) and L2(phylum) microbiome samples relative centered log ratio transformed, unrarefied

conventional clusters per samples conv.sum relative,centered log ratio transformed
conv.clust.z  z score standardized conventional clusters per sample

maaslin analysis for finding out which convetional clusters and taxa are most different between diets

##L6
correlation between conv.clusters and taxa
```{r}


merge.L6.nutr <- L6.rel.clr.U1.U2 %>% merge(.,conv.clust.z,by = 'file_name',all.x=T,all.y = T) %>% column_to_rownames(.,'file_name')

merge.L6.nutr[is.na(merge.L6.nutr)] <- 0


cor.test.L6.nutr <- merge.L6.nutr %>% 
  pivot_longer(names_to = "variable_right", values_to = "value_right", D_0__Archaea.D_1__Euryarchaeota.D_2__Methanobacteria.D_3__Methanobacteriales.D_4__Methanobacteriaceae.D_5__Methanobrevibacter:D_0__Eukaryota.D_1__SAR.D_2__Stramenopiles.D_3__Incertae.Sedis.D_4__Blastocystis.D_5__unidentified.guinea.pig.faeces.isolate.U26177) %>% 
  pivot_longer(names_to = "variable_left", values_to = "value_left", `Alkoholfreie Getränke`:`Wurst, Fleischwaren`) %>% 
  group_by(variable_left, variable_right) %>% 
  
 mutate(p.value = broom::tidy(cor.test(value_left, value_right,method = 'spearman'))$p.value,
         estimate = broom::tidy(cor.test(value_left, value_right,method = 'spearman'))$estimate)

cor.test.L6.nutr[is.na(cor.test.L6.nutr)] <- 0

p.adj.L6.nutr <- subset(cor.test.L6.nutr,select = `p.value`) %>% data.matrix(.) %>% p.adjust(.,method = 'fdr')
r.cor.L6.nutr <- subset(cor.test.L6.nutr,select = `estimate`) %>% data.matrix(.)

```

plotting
```{r}
#x axis log2 correlation

r.cor.L6.nutr[is.nan(r.cor.L6.nutr)] <- 0
r.cor.L6.nutr[is.infinite(r.cor.L6.nutr)] <- 0
r.cor.L6.nutr <- as.data.frame(r.cor.L6.nutr)

#y axis -log10 p.value

p.adj.log.L6.nutr <- -log10(p.adj.L6.nutr)
p.adj.log.L6.nutr[is.infinite(p.adj.log.L6.nutr)] <- 0
p.adj.log.L6.nutr <- as.data.frame(p.adj.log.L6.nutr)

cor.test.adj.L6.nutr <- cbind(cor.test.L6.nutr[ ,c(1,3)],p.adj.log.L6.nutr) %>% cbind(.,r.cor.L6.nutr) %>% as.data.frame(.)
colnames(cor.test.adj.L6.nutr) <- c('genus','clusters','p.adj.log','estimate')

cor.test.adj.L6.nutr <- cor.test.adj.L6.nutr[cor.test.adj.L6.nutr$p.adj.log != 0 & cor.test.adj.L6.nutr$estimate != 0,]

# write_tsv(cor.test.adj.L6.nutr ,paste0(table_dir,'corr.convclust.L6.tsv'))

sig.nutr.L6 <- cor.test.adj.L6.nutr[cor.test.adj.L6.nutr$p.adj.log <= 0.050 & cor.test.adj.L6.nutr$p.adj.log > 0.00000,]
top.sig.nutr.L6 <- sig.nutr.L6[order(-sig.nutr.L6$p.adj.log ),][1:11,]
#volcano plot ggplot()

##volcano plot 
vp.L6.cl.nutr <- ggplot(cor.test.adj.L6.nutr,
    aes(x = `estimate`, y = `p.adj.log`)) +
  geom_point() +
  ggtitle("Volcano plot") +
  xlab("correlation") + 
  ylab("-log10 adjusted p-value")

# ggplotly(vp,tooltip = c('x','y','text'))

vp.L6.cl.nutr+xlim(c(-1,1))

###maaslin

df <- row.names(merge.L6.nutr) %>% as.data.frame(.)
colnames(df) <- 'file_name'
df$group <- ifelse(grepl('U2', df$file_name), 'keto', 'a.non-keto')  
df <- column_to_rownames(df,'file_name')
merge.L6.nutr <- dplyr::select(merge.L6.nutr,everything(),-starts_with('file_name'))
merge.L6.nutr <- merge.L6.nutr[, colSums(merge.L6.nutr != 0) > 0]

maaslin.L6.convclust <- Maaslin2(input_data = merge.L6.nutr,input_metadata = df,fixed_effects = 'group',output = 'L6.consclust_maaslin',
                                 min_abundance = -Inf,
                                 normalization = 'NONE',
                                 transform = 'NONE',
                                 standardize = F, 
                                 random_effects = 'row.names')

```

###export plotting
clusters during keto and non keto diet
```{r}

conv.sum.clr <- conv.clust.z %>% as.data.frame(.) %>% dplyr::select(.,starts_with(c('Süßwaren, Zucker, Bonbons, Schokolade, Brotaufstrich süß, Eis','Kuchen, Feinbackwaren, Dauerbackwaren','Brot- und Kleingebäck','Öle, Fette, Butter, Schmalz, Talg','file_name'))) %>%
  column_to_rownames(.,'file_name')
conv.sum.clr$diet <- ifelse(grepl('U1',row.names(conv.sum.clr)),'non keto','keto')

sweets.clr <- ggplot(conv.sum.clr,aes(x = diet,y = `Süßwaren, Zucker, Bonbons, Schokolade, Brotaufstrich süß, Eis`)) +
  geom_boxplot()+geom_jitter(shape = 21)+ stat_compare_means(comparison = list(c('non keto','keto')),hide.ns = FALSE,symnum.args = symnum.args,vjust = 1.5)

fats.clr <- ggplot(conv.sum.clr,aes(x = diet,y = `Öle, Fette, Butter, Schmalz, Talg`)) +
  geom_boxplot()+geom_jitter(shape = 21)+ stat_compare_means(comparison = list(c('non keto','keto')),hide.ns = FALSE,symnum.args = symnum.args,vjust = 1.5)


# pdf(paste0(output_dir,'boxplots.taxa.asso/convclust.pdf')

ggarrange(sweets.clr,fats.clr,ncol = 2,nrow = 1)


# dev.off()

```

##L2
correlation between conventional clusters and taxa
```{r}

L2.rel.clr.U1.U2 <- L2.rel.clr.U1.U2[, colSums(L2.rel.clr.U1.U2 != 0) > 0]

merge.L2.nutr <- L2.rel.clr.U1.U2 %>% merge(.,conv.clust.z,by = 'file_name',all.x=T,all.y = T) %>% column_to_rownames(.,'file_name')

merge.L2.nutr[is.na(merge.L2.nutr)] <- 0

cor.test.L2.nutr <- merge.L2.nutr %>% 
  pivot_longer(names_to = "variable_right", values_to = "value_right", D_0__Archaea.D_1__Euryarchaeota:D_0__Eukaryota.D_1__SAR) %>% 
  pivot_longer(names_to = "variable_left", values_to = "value_left", `Alkoholfreie Getränke`:`Wurst, Fleischwaren`) %>% 
  group_by(variable_left, variable_right) %>% 
  
 mutate(p.value = broom::tidy(cor.test(value_left, value_right,method = 'spearman'))$p.value,
         estimate = broom::tidy(cor.test(value_left, value_right,method = 'spearman'))$estimate)

cor.test.L2.nutr[is.na(cor.test.L2.nutr)] <- 0

p.adj.L2.nutr <- subset(cor.test.L2.nutr,select = `p.value`) %>% data.matrix(.) %>% p.adjust(.,method = 'fdr')
r.cor.L2.nutr <- subset(cor.test.L2.nutr,select = `estimate`) %>% data.matrix(.)

```

plotting
```{r}
#x axis log2 correlation

r.cor.L2.nutr[is.nan(r.cor.L2.nutr)] <- 0
r.cor.L2.nutr[is.infinite(r.cor.L2.nutr)] <- 0
r.cor.L2.nutr <- as.data.frame(r.cor.L2.nutr)

#y axis -log10 p.value

p.adj.log.L2.nutr <- -log10(p.adj.L2.nutr)
p.adj.log.L2.nutr[is.infinite(p.adj.log.L2.nutr)] <- 0
p.adj.log.L2.nutr <- as.data.frame(p.adj.log.L2.nutr)

cor.test.adj.L2.nutr <- cbind(cor.test.L2.nutr[ ,c(1,3)],p.adj.log.L2.nutr) %>% cbind(.,r.cor.L2.nutr) %>% as.data.frame(.)
colnames(cor.test.adj.L2.nutr) <- c('phylum','clusters','p.adj.log','estimate')

cor.test.adj.L2.nutr <- cor.test.adj.L2.nutr[cor.test.adj.L2.nutr$p.adj.log != 0 & cor.test.adj.L2.nutr$estimate != 0,]

# write_tsv(cor.test.adj.L2.nutr ,paste0(table_dir,'corr.convclust.L2.tsv'))

sig.nutr.L2 <- cor.test.adj.L2.nutr[cor.test.adj.L2.nutr$p.adj.log <= 0.050 & cor.test.adj.L2.nutr$p.adj.log > 0.00000,]
top.sig.nutr.L2 <- sig.nutr.L2[order(-sig.nutr.L2$p.adj.log ),][1:11,]
#volcano plot ggplot()

#volcano plot
vp.L2.cl.nutr <- ggplot(cor.test.adj.L2.nutr,
    aes(x = `estimate`, y = `p.adj.log`)) +
  geom_point() +
  ggtitle("Volcano plot") +
  xlab("correlation") + 
  ylab("-log10 adjusted p-value")

# ggplotly(vp,tooltip = c('x','y','text'))

vp.L2.cl.nutr+xlim(c(-1,1))

###maaslin

df <- row.names(merge.L2.nutr) %>% as.data.frame(.)
colnames(df) <- 'file_name'
df$group <- ifelse(grepl('U2', df$file_name), 'keto', 'a.non-keto')  
df <- column_to_rownames(df,'file_name')
merge.L2.nutr <- dplyr::select(merge.L2.nutr,everything(),-starts_with('file_name'))
merge.L2.nutr <- merge.L2.nutr[, colSums(merge.L2.nutr != 0) > 0]

maaslin.L2.convclust <- Maaslin2(input_data = merge.L2.nutr,input_metadata = df,fixed_effects = 'group',output = 'L2.convclust_maaslin',
                                 min_abundance = -Inf,
                                 normalization = 'NONE',
                                 transform = 'NONE',
                                 standardize = F, 
                                 random_effects = 'row.names')
                          
```
