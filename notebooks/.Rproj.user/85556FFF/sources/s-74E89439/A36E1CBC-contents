---
title: "BLS beta-diversity"
output: html_notebook
---

# Libraries
```{r}
library(tidyverse)
library(Rtsne)
library(FactoMineR)
```

# Paths
```{r}
output_dir = '../results/'
data_dir = '../data/'
table_dir = paste0(data_dir, 'tables/')
```

# Data Import
```{r}
bls.scale <- read_tsv(paste0(table_dir, 'BLS.scale.15Jun2020.tsv'))
bls.properties <- read_tsv(paste0(table_dir, 'BLS.properties.15Jun2020.tsv'))
```

# Dimensionality Reduction

Data
```{r}
keep <- !bls.scale$item_cat %in% c('Menükomponenten' ,'Gewürze, Würzmittel, Hilfsstoffe')
metadata <- bls.scale[keep, c('item_id','item_cat','item_subcat','item_descr')]
df <- bls.scale[keep,] %>% 
  select(everything(), -starts_with('item'), item_id) %>% 
  mutate_at(.vars = vars(everything(), -item_id), 
            .funs = funs(replace_na(., 0))) %>% 
  column_to_rownames('item_id') %>% 
  as.matrix()
```

## PCA

### gelman normalization

Transform
```{r}
scale_gelman <- function(x) {
  return((x - mean(x, na.rm = T)) / (2 * sd(x, na.rm = T)))
}
df.scale_gelman <- apply(df, 2, function(x) scale_gelman(x))
```

```{r}
df.scale_gelman.pca_data <- PCA(X = df.scale_gelman, graph = FALSE, scale.unit = T)

df.scale_gelman.pca <- df.scale_gelman.pca_data %>% 
  .$ind %>% .$coord %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'Name') 

df.data.scale_gelman.pca <- df.scale_gelman.pca %>% 
  left_join(., metadata, by = c('Name' = 'item_id'))
```

```{r fig.width=10, fig.height=10}
df.data.scale_gelman.pca %>% 
  ggplot(aes(Dim.2, Dim.1)) +
  geom_point(size = 0.5, aes(col = item_cat)) + 
  labs(y = paste0('PC 1 (', round(df.scale_gelman.pca_data$eig[1,'percentage of variance'], 1), '%)'), 
       x = paste0('PC 2 (', round(df.scale_gelman.pca_data$eig[2,'percentage of variance'], 1), '%)')) +
  theme(plot.title = element_text(hjust = 0.5),
        aspect.ratio = 1,
        # legend.position = 'none'
        ) + 
  guides(fill = guide_legend(ncol = 1))
```

### clr transform

```{r}
pseudo = 1e-15 # 1e-9
df.clr <- rgr::clr(df + pseudo, ifclose = FALSE, ifwarn = TRUE)
df.clr.unit <- t(scale(t(df.clr), center = F, scale = T))
```

```{r}
X = cbind(metadata$item_cat, as.data.frame(df.clr))
df.clr.pca_data <- PCA(X = df.clr, graph = FALSE, scale.unit = T)

df.clr.pca <- df.clr.pca_data %>% 
  .$ind %>% .$coord %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'Name') 

df.data.clr.pca <- df.clr.pca %>% 
  left_join(., metadata, by = c('Name' = 'item_id'))
```

Plot
```{r fig.width=15, fig.height=10}
df.data.clr.pca %>% 
  ggplot(aes(Dim.1, Dim.2, labels = item_descr)) +
  geom_point(size = 0.5, aes(col = item_cat)) + 
  labs(y = paste0('PC 1 (', round(df.clr.pca_data$eig[1,'percentage of variance'], 1), '%)'), 
       x = paste0('PC 2 (', round(df.clr.pca_data$eig[2,'percentage of variance'], 1), '%)')) +
  theme(plot.title = element_text(hjust = 0.5),
        aspect.ratio = 1, 
        ) + 
  guides(fill = guide_legend(ncol = 1))
```


Loop through Property Categories
```{r fig.width=15, fig.height=10}
pexpand <- rep(0.1, 2)
prop_cat <- 
  tibble(Property = colnames(df.clr)) %>% 
  left_join(., bls.properties) %>% 
  mutate(Category = replace_na(Category, 'Zusammensetzung')) %>% 
  pull(Category)

p <-
  factoextra::fviz_pca_biplot(X = df.clr.pca_data, 
                            # samples
                            fill.ind = metadata$item_cat, col.ind = 'black',
                            pointshape = 21, pointsize = 1.5,
                            geom.ind = 'point', repel = T, 
                            
                            # variables
                            col.var = prop_cat,
                            title = 'Overview of all Features',
                            label = F) + 
  theme(aspect.ratio = 1) + 
  scale_x_continuous(expand = pexpand) + 
  scale_y_continuous(expand = pexpand)
ggsave(p, filename = paste0(output_dir, 'BLS.All.pdf'), device = 'pdf', width = 15, height = 10, dpi = 300)

for (cat in unique(bls.properties$Category)) {
  svars = bls.properties %>% filter(Category == cat) %>% pull(Property)
  p <- factoextra::fviz_pca_biplot(X = df.clr.pca_data, 
                            # samples
                            fill.ind = metadata$item_cat, col.ind = 'black',
                            pointshape = 21, pointsize = 1.5,
                            geom.ind = 'point', repel = T, 
                            
                            # variables
                            col.var = 'black',
                            select.var = list('name' = svars), 
                            title = paste0('Feature: ', cat)) + 
  theme(aspect.ratio = 1) + 
  scale_x_continuous(expand = pexpand) + 
  scale_y_continuous(expand = pexpand)
  
  fname = paste0(output_dir, 'BLS.', cat, '.pdf')
  print(fname)
  print(p)
  ggsave(p, filename = fname, device = 'pdf', width = 15, height = 10, dpi = 300)
}
```


## t-SNE
```{r}
df.tsne_data <- Rtsne(X = as.matrix(df.clr),
                     check_duplicates = FALSE,
                     pca = T, pca_center = T, pca_scale = T, normalize = T, 
                     dims = 2, perplexity = 35,
                     verbose=TRUE, max_iter=1000)

df.data.tsne <- cbind(metadata, df.tsne_data$Y) %>% 
  rename(Dim.1 = `1`, 
         Dim.2 = `2`) 
```

Plot
```{r fig.width=10, fig.height=10}
df.data.tsne %>% 
  ggplot(aes(Dim.2, Dim.1)) +
  geom_point(size = 0.5, aes(col = item_cat)) + 
  theme(plot.title = element_text(hjust = 0.5),
        aspect.ratio = 1, 
        ) + 
  guides(fill = guide_legend(ncol = 1))
```

### Loop Perplexity
```{r}
loop_tsne <- function(df, label) {
  output <- NULL
  for (perplexity in seq(10, 50, 20)) {
  tmp.tsne_data <- Rtsne(X = as.matrix(df),
                     check_duplicates = FALSE,
                     pca = T, pca_center = T, pca_scale = T, normalize = T, 
                     dims = 2, perplexity = perplexity,
                     verbose=TRUE, max_iter=400)
  tmp.data <- 
    cbind(metadata, tmp.tsne_data$Y) %>% 
    rename(Dim.1 = `1`, 
         Dim.2 = `2`) %>% 
    mutate(perplexity = perplexity)  
  output <- rbind(output, tmp.data)
  }
  return(output %>% mutate(label = label))
}

tsne.clr <- loop_tsne(df.clr, 'clr')
tsne.raw <- loop_tsne(df, 'raw')
tsne.scale_gelman <- loop_tsne(df.scale_gelman, 'gelman')
```



```{r}
df.tsne_loop.all <- 
  bind_rows(.id = 'method',
    df = tsne.raw, 
    df.clr = tsne.clr, 
    df.scale_gelman = tsne.scale_gelman)
```


```{r fig.width=20, fig.height=15}
df.tsne_loop.all %>% 
  filter(!item_cat %in% c('Menükomponenten' ,'Gewürze, Würzmittel, Hilfsstoffe')) %>%
  ggplot(aes(Dim.2, Dim.1)) +
  geom_point(size = 1, alpha = 0.5, aes(col = item_cat)) + 
  theme(plot.title = element_text(hjust = 0.5),
        aspect.ratio = 1,
        ) + 
  guides(fill = guide_legend(ncol = 1)) + 
  theme(legend.position = 'none') + 
  facet_grid(rows = vars(method), 
             cols = vars(perplexity), scales = 'free', space = 'free')
```

# hclust

```{r}
df.clr.pca.hclust_data <- hclust(dist(df.data.clr.pca %>% select(starts_with('Dim'))), method = 'ward.D')
plot(df.clr.pca.hclust_data)
```
