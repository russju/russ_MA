---
title: "Prodi to BLS"
output: html_notebook
---

# Libraries
```{r}
library(tidyverse)
```

# Paths
```{r}
output_dir = '../results/'
bin_dir = '../bin/'
data_dir = '../data/'
table_dir = paste0(data_dir, 'tables/')
```

# Source
```{r}
source(paste0(bin_dir, 'distmat_utils.R'))
```


## Create Output Dirs
```{r}
dir.create(output_dir)
dir.create(table_dir)
```

# Data Import
```{r}
keto.summary <- read_tsv(paste0(table_dir, 'Keto.summary.tsv'))
keto.samples <- read_tsv(paste0(table_dir, 'Keto.samples.tsv'))
bls.gram <- read_tsv(paste0(table_dir, 'BLS.gram.15Jun2020.tsv'))
```

Ppl used Prodi software to input data. When food item was not in the database they created a new one, based on the packaging info of the product. This means, that micronutrients for these foods are missing (NA).

How much is 'unclassified?' as a fraction of kalories consumed?
```{r}
keto.samples %>% 
  filter(item != 'Leitungswasser Freiburg') %>% 
  mutate(classified = ifelse(is.na(Calcium), 'unclassified', 'classified')) %>% 
  group_by(sample, time_point, date, classified) %>% 
  summarize(kcal = sum(`Energie (kcal)`, na.rm = T)) %>% 
  pivot_wider(names_from = 'classified', values_from = 'kcal') %>% 
  mutate_at(.vars = vars(classified, unclassified),
            .funs = funs(replace_na(., 0))) %>% 
  mutate(kcal = classified + unclassified, 
         classified.p = classified / kcal) %>% View()
```
Mostly >90% classified, but 10% of samples have more than 20% of kalories not annotated, going as high as 50%.

# Prodi to BLS map
We need to try to map the existing Prodi Items to the BLS database so that we can estimate micronutrients - especially individual fatty acids which - in sum - could differ between high/low sterol converters.
Prodi uses BLS, but the underlying naming is slightly different. 
We'll use regex and partially hard-coded renames of items. This is ugly

BLS available food items
```{r}
bls.food <- bls.gram %>% 
  select(item_id, item_descr, item_info, item_cooking) %>% 
  mutate(name = str_to_lower(item_descr))
```

# Automatic
<!-- We can try to make a map of the most similar food items based on available nutrients in Prodi -->
<!-- We first get the Prodi items and normalize to per-calorie and return all distinct items (removing duplicates from individual entries based on different portion size) -->
<!-- ```{r} -->
<!-- keto.data <-  -->
<!--   keto.samples %>%  -->
<!--   select(item:`Vitamin K Phyllochinon`) %>%  -->
<!--   mutate_at(.vars = vars(everything(), -item, -`Energie (kcal)`),  -->
<!--             .funs = funs((replace_na((replace_na(., 0) / (`Energie (kcal)` + 1e-23)), 0)))) %>%  -->
<!--   select(-`Energie (kcal)`) %>%  -->
<!--   distinct() %>%  -->
<!--   rownames_to_column('row_n') %>%  -->
<!--   mutate(item_id = paste0('Prodi.', row_n, '.', item)) %>%  -->
<!--   select(item_id, item, everything(), -row_n) -->

<!-- keto.data.1 <-  -->
<!--   keto.data %>%  -->
<!--   select(-item) %>%  -->
<!--   column_to_rownames('item_id') -->
<!-- select_vars <- colnames(keto.data.1) -->
<!-- ``` -->


<!-- ```{r} -->
<!-- bls.data <-  -->
<!--   bls.gram %>%  -->
<!--   select(item_descr, all_of(select_vars), `Energie (kcal)`) %>%  -->
<!--   mutate_at(.vars = vars(everything(), -item_descr, -`Energie (kcal)`),  -->
<!--             .funs = funs((replace_na((replace_na(., 0) / (`Energie (kcal)` + 1e-23)), 0)))) %>%  -->
<!--   select(-`Energie (kcal)`) %>%  -->
<!--   rownames_to_column('row_n') %>%  -->
<!--   mutate(item_id = paste0('BLS.', row_n, '.', item_descr)) %>%  -->
<!--   select(item_id, item_descr, everything(), -row_n) -->

<!-- bls.data.1 <-  -->
<!--   bls.data %>%  -->
<!--   select(-item_descr) %>%  -->
<!--   column_to_rownames('item_id') -->
<!-- ``` -->


<!-- ```{r} -->
<!-- merge <-  -->
<!--   rbind(bls.data.1, keto.data.1) -->
<!-- ``` -->

<!-- Calculate manhattan distance between items -->
<!-- ```{r} -->
<!-- merge.dist <- dist(merge, method = 'manhattan') %>%  -->
<!--   as.matrix() %>%  -->
<!--   as.data.frame() %>%  -->
<!--   rownames_to_column('row') %>%  -->
<!--   filter(grepl(row, pattern = '^Prodi.')) %>%  -->
<!--   select(row, starts_with('BLS.')) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- merge.dist.long <-  -->
<!--   merge.dist %>%  -->
<!--   group_by(row) %>%  -->
<!--   pivot_longer(names_to = 'col', values_to = 'val', cols = starts_with('BLS.')) -->
<!-- ``` -->

<!-- Energy is rounded to full calories so this is not precise due to rounding error. Does not work well due to low quantities. -->
<!-- ```{r} -->
<!-- merge.dist.long %>%  -->
<!--   filter(grepl(row, pattern = 'zwiebel')) %>% View -->
<!-- ``` -->


# Manual
We will merge the Prodi names with BLS names and later combine all found item-item matches to a key-map

## 1. Merge
```{r}
prodi.food <- keto.samples %>% 
  group_by(item) %>% 
  tally() %>% 
  rename(item_prodi = item) %>% 
  mutate(name = str_to_lower(item_prodi)) %>% 
  mutate(name = gsub(name, pattern = '\\([3,6]\\)', replacement = '(zubereitung gastronomie)')) %>% 
  mutate(name = gsub(name, pattern = '\\([1,4]\\)', replacement = '(zubereitung haushalt)')) %>% 
  mutate(name = gsub(name, pattern = '\\([2,5]\\)', replacement = '(zubereitung großküche)')) %>% 
  
  mutate(name = gsub(name, pattern = 'ziegenmilchfrischkäse mind. ', 
                     replacement = 'frischkäse aus ziegenmilch ('),
         name = gsub(name, pattern = 'ziegenmilchschnittkäse mind. ', 
                     replacement = 'schnittkäse aus ziegenmilch ('),
         name = gsub(name, pattern = 'ziegenschnittkäse ', 
                     replacement = 'schnittkäse aus ziegenmilch ('),
         name = gsub(name, pattern = 'ziegenmilchweichkäse mind. ', 
                     replacement = 'weichkäse aus ziegenmilch ('),
         name = gsub(name, pattern = 'ziegenweichkäse ', 
                     replacement = 'weichkäse aus ziegenmilch (')
         ) %>% 
  mutate(name = gsub(name, pattern = 'fett i. tr.$', replacement = 'fett i. tr.)'),
         name = gsub(name, pattern = 'fett i.tr.$', replacement = 'fett i. tr.)'),
         name = gsub(name, pattern = ' %', replacement = '%'),
         name = gsub(name, pattern = 'mind. ', replacement = '(')
         ) 

n_items = nrow(prodi.food)
print(paste0('Total: ', n_items))

merged.1 <- 
  left_join(prodi.food, bls.food, by = 'name')

found.1 <- merged.1 %>% filter(!is.na(item_id))
left.1 <- merged.1 %>% filter(is.na(item_id)) %>% select(-item_id, -item_descr, -item_info, -item_cooking)
n_found = nrow(found.1)
print(paste0('Found: ', n_found, ' (', nrow(left.1), ' left)' ))
```
## 2. Merge
```{r}
merged.2 <- 
  left.1 %>% 
  mutate(name = gsub(name, pattern = '< 10% fett i. tr.\\)', replacement = 'magerstufe'),
         name = gsub(name, pattern = '\\(10% fett i. tr.\\)', replacement = 'viertelfettstufe'),
         name = gsub(name, pattern = '\\(20% fett i. tr.\\)', replacement = 'halbfettstufe'),
         name = gsub(name, pattern = '\\(30% fett i. tr.\\)', replacement = 'dreiviertelfettstufe'),
         name = gsub(name, pattern = '\\(40% fett i. tr.\\)', replacement = 'fettstufe'),
         name = gsub(name, pattern = '\\(45% fett i. tr.\\)', replacement = 'vollfettstufe'),
         name = gsub(name, pattern = '\\(50% fett i. tr.\\)', replacement = 'rahmstufe'),
         name = gsub(name, pattern = '\\(60% fett i. tr.\\)', replacement = 'doppelrahmstufe'),
         ) %>% 
  mutate(name = gsub(name, pattern = 'joghurt 1,5% fett', replacement = 'joghurt fettarm'),
         name = gsub(name, pattern = 'joghurt 3,5% fett', replacement = 'joghurt vollfett'),
         ) %>% 
  mutate(name = gsub(name, pattern = ' roh', replacement = ' frisch')) %>% 
  mutate(name = gsub(name, pattern = 'karotte \\(mohrrübe, möhre\\)', replacement = 'mohrrübe')) %>% 
  mutate(name = gsub(name, pattern = 'karotten gedünstet \\(zubereitung haushalt\\)', 
                     replacement = 'möhren gedünstet (zubereitung haushalt)')) %>% 
  mutate(name = case_when(
    name == 'kaffeesahne 10% fett' ~ 'kaffeesahne 10 % fett',
    name == 'kuhmilch trinkmilch 3,5% fett' ~ 'kuhmilch trinkmilch vollfett', 
    name == 'kuhmilch trinkmilch 1,5% fett' ~ 'kuhmilch trinkmilch fettarm', 
    name == 'trinkmilch mit kakao/schokolade' ~ 'trinkmilch mit kakao, schokolade', 
    name == 'vollmilchschokolade' ~ 'milchschokolade', 
    name == 'sahnevollmilchschokolade' ~ 'sahnemilchschokolade',
    name == 'sahnevollmilchschokolade mit nüssen' ~ 'milchschokolade vollmilch-nuß',
    name == 'soja-milch' ~ 'sojadrink, sojadrinkprodukte',
    name == 'schokolade milchschokolade' ~ 'milchschokolade', 
    name == 'vollmilchschokolade gefüllt mit nuss-nougat' ~ 'milchschokolade nougat',
    name == 'espresso (getränk)' ~ 'kaffee (getränk)',
    name == 'cappuccino' ~ 'kaffee mit milch (getränk)',
    name == 'kaffee halb und halb (getränk)'  ~ 'kaffee halb und halb',
    name == 'kaffee-ersatz (pulver)' ~ 'kaffee-ersatz trocken',
    name == 'vollmilchschokolade gefüllt mit nougat-kaffee' ~ 'schokolade gefüllt mit kaffee',
    name == 'joghurt fettarm' ~ 'joghurt teilentrahmt', 
    name == 'joghurt vollfett probiotisch' ~ 'joghurt vollfett',
    name == 'joghurt angereichert mit magermilchpulver 10% fett' ~ 'joghurt mit magermilch angereichert 10% fett',
    name == 'fruchtjoghurt vollfett' ~ 'joghurt vollfett mit fruchtzubereitung',
    name %in% c('zartbitterschokolade 92% kakao',
                'zartbitterschokolade 85%',
                'zartbitterschokolade 90%',
                'zartbitterschokolade 99%') ~ 'zartbitterschokolade',
    name == 'apfelsaft handelsware' ~ 'apfel fruchtsaft',
    name == 'apfelmus' ~ 'apfelmus (zubereitung haushalt)',
    name %in% c('apfelsinensaft (orangensaft) ungesüßt handelsware', 
                'apfelsinensaft (orangensaft) frisch gepresst muttersaft',
                'orangensaft') ~ 'orange fruchtsaft',
    name %in% c('orange / apfelsine','apfelsine (orange)') ~ 'orange frisch',
    name == 'chia' ~ 'chiasamen getrocknet',
    name %in% c('coca-cola zero','coca-cola light','fanta zero, coca-cola') ~ 'colagetränke entcoffeiniert mit süßstoff', 
    name == 'mousse au chocolat (schokoladenschaum) (zubereitung gastronomie)' ~ 'mousse au chocolat (zubereitung gastronomie)',
    name == 'zwiebel' ~ 'zwiebeln',
    name == 'brötchen' ~ 'brötchen-weizenbrötchen',
    name == 'macadamianuss frisch' ~ 'macadamianuss',
    name == 'schlagsahne 30% fett' ~ 'schlagsahne 30 % fett',
    name == 'polenta frisch' ~ 'polenta (zubereitung gastronomie)',
    name == 'reis geschält frisch' ~ 'reis geschält',
    name == 'fenchel knolle frisch' ~ 'fenchel frisch',
    name == 'frischkäse dreiviertelfettstufe' ~ 'frischkäsezubereitung dreiviertelfettstufe',
    name == 'frischkäse halbfettstufe' ~ 'frischkäsezubereitung halbfettstufe',
    name == 'frischkäse (70% fett i. tr.)' ~ 'frischkäsezubereitung 70%f.i.tr',
    name == 'frischkäse rahm 50% fett i. tr.)' ~ 'frischkäsezubereitung rahmstufe',
    name == 'körniger frischkäse' ~ 'frischkäse', 
    name == 'körniger frischkäse magerstufe' ~ 'frischkäsezubereitung magerstufe',
    name == 'frischkäse doppelrahm (60%, höchst. 85% fett i. tr.)' ~ 'frischkäsezubereitung doppelrahmstufe',
    name == 'fitline 0,2% natur, exquisa frischkäse' ~ 'frischkäsezubereitung magerstufe',
    name == 'radieschen' ~ 'radieschen frisch', 
    name == 'wiener würstchen' ~ 'wiener',
    name == 'lachsschinken' ~ 'schwein schinken roh geräuchert (lachsschinken)',
    name == 'zitronensaft frisch gepresst muttersaft' ~ 'zitrone fruchtsaft',
    name %in% c('kartoffeln geschält druckgedämpft', 'kartoffeln geschält gekocht') ~ 'kartoffeln geschält gegart', 
    name %in% c('kartoffelbrei/kartoffelpüree (0)', 'kartoffelpüree (standardrezeptur)', 'kartoffelbrei / kartoffelpüree (zubereitung haushalt)') ~ 'kartoffelbrei, kartoffelpüree (zubereitung haushalt)',
    name == 'kartoffel gekocht, mit schale' ~ 'kartoffeln ungeschält gegart mit küchenabfall',
    name == 'kartoffelpuffer (standardrezeptur)' ~ 'kartoffelpuffer (zubereitung gastronomie)',
    name %in% c('kartoffelgratin (standardrezeptur)','kartoffelauflauf/kartoffelgratin (0)') ~ 'kartoffelgratin (zubereitung haushalt)',
    name %in% c('broccoli gedämpft', 'broccoli gedünstet (zubereitet ohne fett)', 'broccoli gekocht') ~ 'broccoli gegart',
    name == 'broccoli' ~ 'broccoli frisch',
    name %in% c('aubergine gebacken','aubergine gebraten (zubereitet ohne fett)','aubergine gegart') ~ 'aubergine frisch gegart', 
    name == 'aubergine (eierfrucht)' ~ 'aubergine frisch',
    name %in% c('blumenkohl gedämpft','blumenkohl gekocht') ~ 'blumenkohl gegart',
    name %in% c('creme fraiche 30% fett','creme/schmand 30% fett', 'creme, schmand 30% fett') ~ 'creme, schmand 30 % fett',
    name == 'creme/schmand' ~ 'creme schmand',
    name == 'creme/schmand 20% fett' ~ 'creme, schmand 20% fett',
    name %in% c('erdnusspaste (erdnussmus)', 'erdnusscreme') ~ 'erdnussbutter, -mus',
    T ~ name
  )) %>% 
  left_join(., bls.food, by = 'name')

found.2 <- merged.2 %>% filter(!is.na(item_id))
left.2 <- merged.2 %>% filter(is.na(item_id)) %>% select(-item_id, -item_descr, -item_info, -item_cooking)
n_found = n_found + nrow(found.2)
print(paste0('Found: ', n_found, ' (', nrow(left.2), ' left)' ))
```

## 3. Merge
```{r}
merged.3 <- 
  left.2 %>% 
  mutate(name = gsub(name, pattern = 'gekocht', replacement = 'gegart')) %>% 
  mutate(name = gsub(name, pattern = '^spinat', replacement = 'blattspinat')) %>% 
  mutate(name = case_when(
         name == 'eierteigwaren (nudeln, makkaroni, spaghetti etc.)' ~ 'eierteigwaren',
         name == 'eierteigwaren (nudeln) gegart, abgetropft' ~ 'eierteigwaren gegart',
         name == 'eierteigwaren aus weizen frisch' ~ 'eierteigwaren aus weizen',
         name == 'eierteigwaren spaghetti gegart' ~ 'eierteigwaren gegart',
         name == 'eierteigwaren besonderer art frisch' ~ 'eierteigwaren besonderer art',
         name %in% c('eierteigwaren schnitt-/bandnudeln frisch', 'eierteigwaren spaghetti frisch') ~ 'eierteigwaren spaghetti',
         name == 'eierteigwaren spätzle gegart' ~ 'spätzle (zubereitung haushalt)',
         name %in% c('teigwaren eifrei spaghetti gegart','teigwaren eifrei suppennudeln gegart') ~ 'teigwaren eifrei gegart',
         name == 'teigwaren eifrei aus hartweizengrieß frisch' ~ 'teigwaren aus hartgrieß', 
         name %in% c('gemüsepaprika rot gegart','gemüsepaprika rot gedämpft', 'gemüsepaprika gelb gegart') ~ 'paprikaschoten frisch gegart',
         name == 'tomate' ~ 'tomaten',
         name == 'tomatensoße (standardrezeptur)' ~ 'tomatensoße aus frischen tomaten (zubereitung haushalt)',
         name == 'tomatensoße konserve' ~ 'tomaten konserve gekocht',
         name == 'tomatensalat mit essig und öl (standardrezeptur)' ~ 'tomatensalat mit olivenöl (zubereitung gastronomie)',
         name %in% c('tomatensuppe aus frischen tomaten (zubereitung haushalt)', 'tomatensuppe (standardrezeptur)') ~ 'tomatensuppe (zubereitung haushalt)',
         name == 'tomatensauce toskana, alnatura' ~ 'tomatensoße italienisch (zubereitung großküche)',
         name == 'roggenvollkornbrot' ~ 'vollkornbrot-roggenvollkornbrot',
         name %in% c('vollkornbrot-roggenvollkornschrottoastbrot', 'vollkornbrot-weizen/roggenvollkornschrottoastbrot') ~ 'vollkornbrot-weizen, roggenvollkornschrottoastbrot',
         name %in% c('knäckebrot leicht & cross') ~ 'knäckebrote leicht & cross',
         name == 'knäckebrot' ~ 'knäckebrote',
        name == 'vollkornbrot-roggen/weizenvollkornbrot' ~ 'vollkornbrot-roggenvollkornmischbrot' ,
        name == 'weizen(mehl)brot (weißbrot)' ~ 'weißbrot-weizenbrot', 
        name == 'roggenbrot' ~ 'graubrot-roggenbrot',
        name == 'holzofenbrot' ~ 'holzofenbrote',
        name == 'dinkelbrot' ~ 'dinkelbrot (vollkornbrot)',
        name == 'vollkornbrötchen' ~ 'vollkornbrötchen allgemein',
        name == 'brötchen dinkelbrötchen' ~ 'dinkelbrötchen',
        name == 'vollkornbrötchen-dinkelvollkornbrötchen' ~ 'dinkelvollkornbrötchen',
        name == 'vollkornbrötchen-weizenvollkornbrötchen mit ölsamenzutaten' ~ 'vollkornbrötchen-weizenvollk.brötchen mit ölsamenzutaten',
        name == 'brötchen mit butter und schinkenwurst (standardrezeptur)' ~ 'schinkenbrötchen',
        name == 'grünkohl gegart' ~ 'grünkohl (braunkohl) gegart',
        name == 'lauch / porree gedünstet (zubereitung haushalt)' ~ 'lauch, porree gedünstet (zubereitung haushalt)',
        name == 'schnittsalat (blatt-/ pflücksalat)' ~ 'schnittsalat (blatt- pflücksalat)',
        name %in% c('rind/schwein hackfleisch gebraten (zubereitet ohne fett)',  'rind/schwein hackfleisch gegart') ~ 'rind, schwein hackfleisch gegart',
        name == 'pökelwaren rippchen/schälrippchen' ~ 'pökelwaren rippchen, schälrippchen',
        name == 'pudding-/soßenpulver/cremespeisenpulver' ~ 'pudding-, soßenpulver, cremespeisenpulver',
        name == 'rind/schwein hackfleisch frisch' ~ 'rind, schwein hackfleisch frisch',
        name == 'bierschinken/schinkenpastete' ~ 'bierschinken, schinkenpastete',
        name == 'schweineschmalz/-fett' ~ 'schweineschmalz, -fett',
        name == 'wollwurst/geschwollene' ~ 'wollwurst, geschwollene',
        name == 'eiersalat mit tomaten und essig/öl dressing (zubereitung großküche)' ~ 'eiersalat mit tomaten (zubereitung großküche)',
        name == 'walnuss' ~ 'walnuss frisch',
        name == 'rotbusch-/roibuschtee' ~ 'tee (getränk)', 
        name %in% c('schwein schinken gegart', 'schweineschinken gegart (kochschinken)') ~ 'schwein schinken',
        name == 'schafskäse rahmstufe' ~ 'schafskäse',
        name == 'nuss-nougatcreme' ~ 'nuß-nougat-creme süß',
        
         
         T ~ name)) %>% 
  left_join(., bls.food, by = 'name')

found.3 <- merged.3 %>% filter(!is.na(item_id))
left.3 <- merged.3 %>% filter(is.na(item_id)) %>% select(-item_id, -item_descr, -item_info, -item_cooking)
n_found = n_found + nrow(found.3)
print(paste0('Found: ', n_found, ' (', nrow(left.3), ' left)' ))
```

